{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "brandNewRegistry",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "newCompany",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "newPart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "viewCompany",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "companyId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "companyName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "companyTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "partsArray",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct AstroVerify.Company",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "viewPart",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "partId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "companyAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "partName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "counter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "partTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "allOwners",
              "type": "address[]"
            }
          ],
          "internalType": "struct AstroVerify.Part",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_serialNo",
          "type": "string"
        }
      ],
      "name": "viewRegistry",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "partId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "serialNo",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "registryTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct AstroVerify.Registry",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x88ac1ba74b287e2f3fde70f3c83ebd7a6e0f88557ba62d22b9b1c2be48787c09",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1460498",
    "logsBloom": "0x
    "blockHash": "0x55973fd7adf1ca41706f4b685c8b2bccb1a939094223b1cc899455468f514439",
    "transactionHash": "0x88ac1ba74b287e2f3fde70f3c83ebd7a6e0f88557ba62d22b9b1c2be48787c09",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "1460498",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d36474e0dac8d2c9e0ead46c48b7202a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"brandNewRegistry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"newCompany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"newPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewCompany\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"companyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"companyTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"partsArray\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AstroVerify.Company\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"viewPart\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"partId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"partName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"partTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"allOwners\",\"type\":\"address[]\"}],\"internalType\":\"struct AstroVerify.Part\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_serialNo\",\"type\":\"string\"}],\"name\":\"viewRegistry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"partId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serialNo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registryTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct AstroVerify.Registry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AstroVerify.sol\":\"AstroVerify\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/AstroVerify.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n//total parts created\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\ncontract AstroVerify{\\n    uint company_id=0;\\n    uint part_id=0;\\n\\n    struct Company{\\n        uint companyId;\\n        string companyName;\\n        uint companyTimestamp;\\n        uint[] partsArray;\\n    }\\n    \\n    struct Part{\\n        uint partId;\\n        uint price;\\n        address companyAddress;\\n        string partName;\\n        uint counter;\\n        uint totalSupply;\\n        string description;\\n        uint partTimestamp;\\n        address[] allOwners;        \\n    }\\n\\n\\n    struct Registry{\\n        uint partId;\\n        string serialNo;\\n        uint registryTimestamp;   \\n\\n    }\\n\\n    mapping (address=>Company) companyMapping;\\n    mapping(uint=>Part) partMapping;\\n    mapping (string=>Registry) registryMapping;\\n\\n\\n\\n    function newCompany(string memory _name) payable external {\\n        require(msg.value>50000000000000000, \\\"failed\\\");\\n        company_id++;\\n        companyMapping[msg.sender].companyId=company_id;\\n        companyMapping[msg.sender].companyName=_name;\\n        companyMapping[msg.sender].companyTimestamp=block.timestamp;\\n\\n    }\\n\\n    function viewCompany(address _address) public view returns(Company memory){\\n        return companyMapping[_address];\\n    }\\n\\n    function newPart(string memory _name, uint _totalSupply, string memory _description, uint _price ) public{\\n        part_id++;\\n        partMapping[part_id].partId = part_id;\\n        partMapping[part_id].companyAddress = msg.sender;\\n        partMapping[part_id].partName = _name;\\n        partMapping[part_id].totalSupply = _totalSupply;\\n        partMapping[part_id].description = _description;\\n        partMapping[part_id].partTimestamp = block.timestamp;\\n        partMapping[part_id].price = _price;\\n        partMapping[part_id].allOwners.push(msg.sender);\\n        companyMapping[msg.sender].partsArray.push(part_id);\\n        \\n    }\\n\\n    function brandNewRegistry(uint _id) external payable{\\n\\n        require(msg.value>partMapping[_id].price, \\\"not enough funds\\\");\\n        string memory theCounter= Strings.toString(++partMapping[_id].counter);\\n        string memory tempString=string.concat(Strings.toString(_id), \\\"_\\\");\\n        string memory anotherTemp = string.concat(tempString, theCounter);\\n        registryMapping[anotherTemp].serialNo = anotherTemp;\\n        registryMapping[anotherTemp].partId=_id;\\n        registryMapping[anotherTemp].registryTimestamp=block.timestamp;\\n    }\\n\\n    function viewPart(uint _id) public view returns(Part memory) {\\n        return partMapping[_id];\\n    }\\n\\n    function viewRegistry(string memory _serialNo) public view returns(Registry memory){\\n        return registryMapping[_serialNo];\\n    }\\n\\n\\n\\n    \\n    \\n    \\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n\\n}\",\"keccak256\":\"0x44fa2bdfaba2c9e79364620be719270eee72d3106aafff42f512f58c79053468\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040525f80555f600155348015610016575f80fd5b50611967806100245f395ff3fe608060405260043610610058575f3560e01c80633b59a45e1461006157806358a956cc1461008957806367ce6125146100c55780636c0201ed14610101578063f1e6fe871461013d578063fb659394146101595761005f565b3661005f57005b005b34801561006c575f80fd5b5061008760048036038101906100829190610eca565b610175565b005b348015610094575f80fd5b506100af60048036038101906100aa9190610f66565b610375565b6040516100bc9190611083565b60405180910390f35b3480156100d0575f80fd5b506100eb60048036038101906100e691906110a3565b610450565b6040516100f89190611285565b60405180910390f35b34801561010c575f80fd5b50610127600480360381019061012291906112cf565b6106ad565b6040516101349190611409565b60405180910390f35b61015760048036038101906101529190610f66565b6107fd565b005b610173600480360381019061016e91906110a3565b610937565b005b60015f81548092919061018790611456565b919050555060015460035f60015481526020019081526020015f205f01819055503360035f60015481526020019081526020015f206002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360035f60015481526020019081526020015f20600301908161021f9190611697565b508260035f60015481526020019081526020015f20600501819055508160035f60015481526020019081526020015f20600601908161025e9190611697565b504260035f60015481526020019081526020015f20600701819055508060035f60015481526020019081526020015f206001018190555060035f60015481526020019081526020015f2060080133908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600301600154908060018154018082558091505060019003905f5260205f20015f909190919091505550505050565b61037d610ca9565b60048260405161038d91906117a0565b90815260200160405180910390206040518060600160405290815f82015481526020016001820180546103bf906114ca565b80601f01602080910402602001604051908101604052809291908181526020018280546103eb906114ca565b80156104365780601f1061040d57610100808354040283529160200191610436565b820191905f5260205f20905b81548152906001019060200180831161041957829003601f168201915b505050505081526020016002820154815250509050919050565b610458610cc8565b60035f8381526020019081526020015f20604051806101200160405290815f820154815260200160018201548152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546104ed906114ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610519906114ca565b80156105645780601f1061053b57610100808354040283529160200191610564565b820191905f5260205f20905b81548152906001019060200180831161054757829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682018054610591906114ca565b80601f01602080910402602001604051908101604052809291908181526020018280546105bd906114ca565b80156106085780601f106105df57610100808354040283529160200191610608565b820191905f5260205f20905b8154815290600101906020018083116105eb57829003601f168201915b50505050508152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801561069d57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610654575b5050505050815250509050919050565b6106b5610d24565b60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201548152602001600182018054610716906114ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610742906114ca565b801561078d5780601f106107645761010080835404028352916020019161078d565b820191905f5260205f20905b81548152906001019060200180831161077057829003601f168201915b5050505050815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156107ed57602002820191905f5260205f20905b8154815260200190600101908083116107d9575b5050505050815250509050919050565b66b1a2bc2ec500003411610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083d90611810565b60405180910390fd5b5f8081548092919061085790611456565b91905055505f5460025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01819055508060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010190816108ee9190611697565b504260025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002018190555050565b60035f8281526020019081526020015f2060010154341161098d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098490611878565b60405180910390fd5b5f6109bc60035f8481526020019081526020015f206004015f81546109b190611456565b919050819055610a8e565b90505f6109c883610a8e565b6040516020016109d891906118bc565b60405160208183030381529060405290505f81836040516020016109fd9291906118e1565b604051602081830303815290604052905080600482604051610a1f91906117a0565b90815260200160405180910390206001019081610a3c9190611697565b5083600482604051610a4e91906117a0565b90815260200160405180910390205f018190555042600482604051610a7391906117a0565b90815260200160405180910390206002018190555050505050565b60605f6001610a9c84610b58565b0190505f8167ffffffffffffffff811115610aba57610ab9610d73565b5b6040519080825280601f01601f191660200182016040528015610aec5781602001600182028036833780820191505090505b5090505f82602001820190505b600115610b4d578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610b4257610b41611904565b5b0494505f8503610af9575b819350505050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610bb4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610baa57610ba9611904565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610bf1576d04ee2d6d415b85acef81000000008381610be757610be6611904565b5b0492506020810190505b662386f26fc100008310610c2057662386f26fc100008381610c1657610c15611904565b5b0492506010810190505b6305f5e1008310610c49576305f5e1008381610c3f57610c3e611904565b5b0492506008810190505b6127108310610c6e576127108381610c6457610c63611904565b5b0492506004810190505b60648310610c915760648381610c8757610c86611904565b5b0492506002810190505b600a8310610ca0576001810190505b80915050919050565b60405180606001604052805f8152602001606081526020015f81525090565b6040518061012001604052805f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020015f81526020015f8152602001606081526020015f8152602001606081525090565b60405180608001604052805f8152602001606081526020015f8152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610da982610d63565b810181811067ffffffffffffffff82111715610dc857610dc7610d73565b5b80604052505050565b5f610dda610d4a565b9050610de68282610da0565b919050565b5f67ffffffffffffffff821115610e0557610e04610d73565b5b610e0e82610d63565b9050602081019050919050565b828183375f83830152505050565b5f610e3b610e3684610deb565b610dd1565b905082815260208101848484011115610e5757610e56610d5f565b5b610e62848285610e1b565b509392505050565b5f82601f830112610e7e57610e7d610d5b565b5b8135610e8e848260208601610e29565b91505092915050565b5f819050919050565b610ea981610e97565b8114610eb3575f80fd5b50565b5f81359050610ec481610ea0565b92915050565b5f805f8060808587031215610ee257610ee1610d53565b5b5f85013567ffffffffffffffff811115610eff57610efe610d57565b5b610f0b87828801610e6a565b9450506020610f1c87828801610eb6565b935050604085013567ffffffffffffffff811115610f3d57610f3c610d57565b5b610f4987828801610e6a565b9250506060610f5a87828801610eb6565b91505092959194509250565b5f60208284031215610f7b57610f7a610d53565b5b5f82013567ffffffffffffffff811115610f9857610f97610d57565b5b610fa484828501610e6a565b91505092915050565b610fb681610e97565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610ff3578082015181840152602081019050610fd8565b5f8484015250505050565b5f61100882610fbc565b6110128185610fc6565b9350611022818560208601610fd6565b61102b81610d63565b840191505092915050565b5f606083015f83015161104b5f860182610fad565b50602083015184820360208601526110638282610ffe565b91505060408301516110786040860182610fad565b508091505092915050565b5f6020820190508181035f83015261109b8184611036565b905092915050565b5f602082840312156110b8576110b7610d53565b5b5f6110c584828501610eb6565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6110f7826110ce565b9050919050565b611107816110ed565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61114183836110fe565b60208301905092915050565b5f602082019050919050565b5f6111638261110d565b61116d8185611117565b935061117883611127565b805f5b838110156111a857815161118f8882611136565b975061119a8361114d565b92505060018101905061117b565b5085935050505092915050565b5f61012083015f8301516111cb5f860182610fad565b5060208301516111de6020860182610fad565b5060408301516111f160408601826110fe565b50606083015184820360608601526112098282610ffe565b915050608083015161121e6080860182610fad565b5060a083015161123160a0860182610fad565b5060c083015184820360c08601526112498282610ffe565b91505060e083015161125e60e0860182610fad565b506101008301518482036101008601526112788282611159565b9150508091505092915050565b5f6020820190508181035f83015261129d81846111b5565b905092915050565b6112ae816110ed565b81146112b8575f80fd5b50565b5f813590506112c9816112a5565b92915050565b5f602082840312156112e4576112e3610d53565b5b5f6112f1848285016112bb565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61132e8383610fad565b60208301905092915050565b5f602082019050919050565b5f611350826112fa565b61135a8185611304565b935061136583611314565b805f5b8381101561139557815161137c8882611323565b97506113878361133a565b925050600181019050611368565b5085935050505092915050565b5f608083015f8301516113b75f860182610fad565b50602083015184820360208601526113cf8282610ffe565b91505060408301516113e46040860182610fad565b50606083015184820360608601526113fc8282611346565b9150508091505092915050565b5f6020820190508181035f83015261142181846113a2565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61146082610e97565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361149257611491611429565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806114e157607f821691505b6020821081036114f4576114f361149d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026115567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261151b565b611560868361151b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61159b61159661159184610e97565b611578565b610e97565b9050919050565b5f819050919050565b6115b483611581565b6115c86115c0826115a2565b848454611527565b825550505050565b5f90565b6115dc6115d0565b6115e78184846115ab565b505050565b5b8181101561160a576115ff5f826115d4565b6001810190506115ed565b5050565b601f82111561164f57611620816114fa565b6116298461150c565b81016020851015611638578190505b61164c6116448561150c565b8301826115ec565b50505b505050565b5f82821c905092915050565b5f61166f5f1984600802611654565b1980831691505092915050565b5f6116878383611660565b9150826002028217905092915050565b6116a082610fbc565b67ffffffffffffffff8111156116b9576116b8610d73565b5b6116c382546114ca565b6116ce82828561160e565b5f60209050601f8311600181146116ff575f84156116ed578287015190505b6116f7858261167c565b86555061175e565b601f19841661170d866114fa565b5f5b828110156117345784890151825560018201915060208501945060208101905061170f565b86831015611751578489015161174d601f891682611660565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f61177a82610fbc565b6117848185611766565b9350611794818560208601610fd6565b80840191505092915050565b5f6117ab8284611770565b915081905092915050565b5f82825260208201905092915050565b7f6661696c656400000000000000000000000000000000000000000000000000005f82015250565b5f6117fa6006836117b6565b9150611805826117c6565b602082019050919050565b5f6020820190508181035f830152611827816117ee565b9050919050565b7f6e6f7420656e6f7567682066756e6473000000000000000000000000000000005f82015250565b5f6118626010836117b6565b915061186d8261182e565b602082019050919050565b5f6020820190508181035f83015261188f81611856565b9050919050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b5f6118c78284611770565b91506118d282611896565b60018201915081905092915050565b5f6118ec8285611770565b91506118f88284611770565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea2646970667358221220b41d2a697cc78430156afbb020aa11d37c7bf0bc41e5173c6b1516af3ae1755f64736f6c63430008150033",
  "deployedBytecode": "0x608060405260043610610058575f3560e01c80633b59a45e1461006157806358a956cc1461008957806367ce6125146100c55780636c0201ed14610101578063f1e6fe871461013d578063fb659394146101595761005f565b3661005f57005b005b34801561006c575f80fd5b5061008760048036038101906100829190610eca565b610175565b005b348015610094575f80fd5b506100af60048036038101906100aa9190610f66565b610375565b6040516100bc9190611083565b60405180910390f35b3480156100d0575f80fd5b506100eb60048036038101906100e691906110a3565b610450565b6040516100f89190611285565b60405180910390f35b34801561010c575f80fd5b50610127600480360381019061012291906112cf565b6106ad565b6040516101349190611409565b60405180910390f35b61015760048036038101906101529190610f66565b6107fd565b005b610173600480360381019061016e91906110a3565b610937565b005b60015f81548092919061018790611456565b919050555060015460035f60015481526020019081526020015f205f01819055503360035f60015481526020019081526020015f206002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360035f60015481526020019081526020015f20600301908161021f9190611697565b508260035f60015481526020019081526020015f20600501819055508160035f60015481526020019081526020015f20600601908161025e9190611697565b504260035f60015481526020019081526020015f20600701819055508060035f60015481526020019081526020015f206001018190555060035f60015481526020019081526020015f2060080133908060018154018082558091505060019003905f5260205f20015f9091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20600301600154908060018154018082558091505060019003905f5260205f20015f909190919091505550505050565b61037d610ca9565b60048260405161038d91906117a0565b90815260200160405180910390206040518060600160405290815f82015481526020016001820180546103bf906114ca565b80601f01602080910402602001604051908101604052809291908181526020018280546103eb906114ca565b80156104365780601f1061040d57610100808354040283529160200191610436565b820191905f5260205f20905b81548152906001019060200180831161041957829003601f168201915b505050505081526020016002820154815250509050919050565b610458610cc8565b60035f8381526020019081526020015f20604051806101200160405290815f820154815260200160018201548152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820180546104ed906114ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610519906114ca565b80156105645780601f1061053b57610100808354040283529160200191610564565b820191905f5260205f20905b81548152906001019060200180831161054757829003601f168201915b505050505081526020016004820154815260200160058201548152602001600682018054610591906114ca565b80601f01602080910402602001604051908101604052809291908181526020018280546105bd906114ca565b80156106085780601f106105df57610100808354040283529160200191610608565b820191905f5260205f20905b8154815290600101906020018083116105eb57829003601f168201915b50505050508152602001600782015481526020016008820180548060200260200160405190810160405280929190818152602001828054801561069d57602002820191905f5260205f20905b815f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610654575b5050505050815250509050919050565b6106b5610d24565b60025f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206040518060800160405290815f8201548152602001600182018054610716906114ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610742906114ca565b801561078d5780601f106107645761010080835404028352916020019161078d565b820191905f5260205f20905b81548152906001019060200180831161077057829003601f168201915b5050505050815260200160028201548152602001600382018054806020026020016040519081016040528092919081815260200182805480156107ed57602002820191905f5260205f20905b8154815260200190600101908083116107d9575b5050505050815250509050919050565b66b1a2bc2ec500003411610846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083d90611810565b60405180910390fd5b5f8081548092919061085790611456565b91905055505f5460025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f01819055508060025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2060010190816108ee9190611697565b504260025f3373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f206002018190555050565b60035f8281526020019081526020015f2060010154341161098d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098490611878565b60405180910390fd5b5f6109bc60035f8481526020019081526020015f206004015f81546109b190611456565b919050819055610a8e565b90505f6109c883610a8e565b6040516020016109d891906118bc565b60405160208183030381529060405290505f81836040516020016109fd9291906118e1565b604051602081830303815290604052905080600482604051610a1f91906117a0565b90815260200160405180910390206001019081610a3c9190611697565b5083600482604051610a4e91906117a0565b90815260200160405180910390205f018190555042600482604051610a7391906117a0565b90815260200160405180910390206002018190555050505050565b60605f6001610a9c84610b58565b0190505f8167ffffffffffffffff811115610aba57610ab9610d73565b5b6040519080825280601f01601f191660200182016040528015610aec5781602001600182028036833780820191505090505b5090505f82602001820190505b600115610b4d578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610b4257610b41611904565b5b0494505f8503610af9575b819350505050919050565b5f805f90507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610bb4577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610baa57610ba9611904565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610bf1576d04ee2d6d415b85acef81000000008381610be757610be6611904565b5b0492506020810190505b662386f26fc100008310610c2057662386f26fc100008381610c1657610c15611904565b5b0492506010810190505b6305f5e1008310610c49576305f5e1008381610c3f57610c3e611904565b5b0492506008810190505b6127108310610c6e576127108381610c6457610c63611904565b5b0492506004810190505b60648310610c915760648381610c8757610c86611904565b5b0492506002810190505b600a8310610ca0576001810190505b80915050919050565b60405180606001604052805f8152602001606081526020015f81525090565b6040518061012001604052805f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff168152602001606081526020015f81526020015f8152602001606081526020015f8152602001606081525090565b60405180608001604052805f8152602001606081526020015f8152602001606081525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610da982610d63565b810181811067ffffffffffffffff82111715610dc857610dc7610d73565b5b80604052505050565b5f610dda610d4a565b9050610de68282610da0565b919050565b5f67ffffffffffffffff821115610e0557610e04610d73565b5b610e0e82610d63565b9050602081019050919050565b828183375f83830152505050565b5f610e3b610e3684610deb565b610dd1565b905082815260208101848484011115610e5757610e56610d5f565b5b610e62848285610e1b565b509392505050565b5f82601f830112610e7e57610e7d610d5b565b5b8135610e8e848260208601610e29565b91505092915050565b5f819050919050565b610ea981610e97565b8114610eb3575f80fd5b50565b5f81359050610ec481610ea0565b92915050565b5f805f8060808587031215610ee257610ee1610d53565b5b5f85013567ffffffffffffffff811115610eff57610efe610d57565b5b610f0b87828801610e6a565b9450506020610f1c87828801610eb6565b935050604085013567ffffffffffffffff811115610f3d57610f3c610d57565b5b610f4987828801610e6a565b9250506060610f5a87828801610eb6565b91505092959194509250565b5f60208284031215610f7b57610f7a610d53565b5b5f82013567ffffffffffffffff811115610f9857610f97610d57565b5b610fa484828501610e6a565b91505092915050565b610fb681610e97565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610ff3578082015181840152602081019050610fd8565b5f8484015250505050565b5f61100882610fbc565b6110128185610fc6565b9350611022818560208601610fd6565b61102b81610d63565b840191505092915050565b5f606083015f83015161104b5f860182610fad565b50602083015184820360208601526110638282610ffe565b91505060408301516110786040860182610fad565b508091505092915050565b5f6020820190508181035f83015261109b8184611036565b905092915050565b5f602082840312156110b8576110b7610d53565b5b5f6110c584828501610eb6565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6110f7826110ce565b9050919050565b611107816110ed565b82525050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61114183836110fe565b60208301905092915050565b5f602082019050919050565b5f6111638261110d565b61116d8185611117565b935061117883611127565b805f5b838110156111a857815161118f8882611136565b975061119a8361114d565b92505060018101905061117b565b5085935050505092915050565b5f61012083015f8301516111cb5f860182610fad565b5060208301516111de6020860182610fad565b5060408301516111f160408601826110fe565b50606083015184820360608601526112098282610ffe565b915050608083015161121e6080860182610fad565b5060a083015161123160a0860182610fad565b5060c083015184820360c08601526112498282610ffe565b91505060e083015161125e60e0860182610fad565b506101008301518482036101008601526112788282611159565b9150508091505092915050565b5f6020820190508181035f83015261129d81846111b5565b905092915050565b6112ae816110ed565b81146112b8575f80fd5b50565b5f813590506112c9816112a5565b92915050565b5f602082840312156112e4576112e3610d53565b5b5f6112f1848285016112bb565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f61132e8383610fad565b60208301905092915050565b5f602082019050919050565b5f611350826112fa565b61135a8185611304565b935061136583611314565b805f5b8381101561139557815161137c8882611323565b97506113878361133a565b925050600181019050611368565b5085935050505092915050565b5f608083015f8301516113b75f860182610fad565b50602083015184820360208601526113cf8282610ffe565b91505060408301516113e46040860182610fad565b50606083015184820360608601526113fc8282611346565b9150508091505092915050565b5f6020820190508181035f83015261142181846113a2565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61146082610e97565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361149257611491611429565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806114e157607f821691505b6020821081036114f4576114f361149d565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026115567fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261151b565b611560868361151b565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61159b61159661159184610e97565b611578565b610e97565b9050919050565b5f819050919050565b6115b483611581565b6115c86115c0826115a2565b848454611527565b825550505050565b5f90565b6115dc6115d0565b6115e78184846115ab565b505050565b5b8181101561160a576115ff5f826115d4565b6001810190506115ed565b5050565b601f82111561164f57611620816114fa565b6116298461150c565b81016020851015611638578190505b61164c6116448561150c565b8301826115ec565b50505b505050565b5f82821c905092915050565b5f61166f5f1984600802611654565b1980831691505092915050565b5f6116878383611660565b9150826002028217905092915050565b6116a082610fbc565b67ffffffffffffffff8111156116b9576116b8610d73565b5b6116c382546114ca565b6116ce82828561160e565b5f60209050601f8311600181146116ff575f84156116ed578287015190505b6116f7858261167c565b86555061175e565b601f19841661170d866114fa565b5f5b828110156117345784890151825560018201915060208501945060208101905061170f565b86831015611751578489015161174d601f891682611660565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f61177a82610fbc565b6117848185611766565b9350611794818560208601610fd6565b80840191505092915050565b5f6117ab8284611770565b915081905092915050565b5f82825260208201905092915050565b7f6661696c656400000000000000000000000000000000000000000000000000005f82015250565b5f6117fa6006836117b6565b9150611805826117c6565b602082019050919050565b5f6020820190508181035f830152611827816117ee565b9050919050565b7f6e6f7420656e6f7567682066756e6473000000000000000000000000000000005f82015250565b5f6118626010836117b6565b915061186d8261182e565b602082019050919050565b5f6020820190508181035f83015261188f81611856565b9050919050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b5f6118c78284611770565b91506118d282611896565b60018201915081905092915050565b5f6118ec8285611770565b91506118f88284611770565b91508190509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffdfea2646970667358221220b41d2a697cc78430156afbb020aa11d37c7bf0bc41e5173c6b1516af3ae1755f64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1205,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "company_id",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1208,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "part_id",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1250,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "companyMapping",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Company)1218_storage)"
      },
      {
        "astId": 1255,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "partMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Part)1238_storage)"
      },
      {
        "astId": 1260,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "registryMapping",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Registry)1245_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Company)1218_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AstroVerify.Company)",
        "numberOfBytes": "32",
        "value": "t_struct(Company)1218_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Registry)1245_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct AstroVerify.Registry)",
        "numberOfBytes": "32",
        "value": "t_struct(Registry)1245_storage"
      },
      "t_mapping(t_uint256,t_struct(Part)1238_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AstroVerify.Part)",
        "numberOfBytes": "32",
        "value": "t_struct(Part)1238_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Company)1218_storage": {
        "encoding": "inplace",
        "label": "struct AstroVerify.Company",
        "members": [
          {
            "astId": 1210,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1212,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1214,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1217,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partsArray",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Part)1238_storage": {
        "encoding": "inplace",
        "label": "struct AstroVerify.Part",
        "members": [
          {
            "astId": 1220,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1222,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1224,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1226,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1228,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "counter",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1230,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "totalSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1232,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "description",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1234,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1237,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "allOwners",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Registry)1245_storage": {
        "encoding": "inplace",
        "label": "struct AstroVerify.Registry",
        "members": [
          {
            "astId": 1240,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1242,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "serialNo",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1244,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "registryTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}