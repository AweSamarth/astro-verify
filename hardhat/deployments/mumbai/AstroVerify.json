{
  "address": "0x4ecdBACEBC451879294bcC2756f3FE6D47dE9c45",
  "abi": [
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "brandNewRegistry",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "newCompany",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "newPart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "viewCompany",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "companyId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "companyName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "companyTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "partsArray",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct AstroVerify.Company",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "viewPart",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "partId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "companyAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "partName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "counter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "partTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "allOwners",
              "type": "address[]"
            }
          ],
          "internalType": "struct AstroVerify.Part",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_serialNo",
          "type": "string"
        }
      ],
      "name": "viewRegistry",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "partId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "serialNo",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "registryTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct AstroVerify.Registry",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf606792764ccae71dbb70fd3107a070d80f3a1028a78cb03b258a9e89dbb91f5",
  "receipt": {
    "to": null,
    "from": "0xCDF770392F1E5E61725Cc9522c80070134D50eC7",
    "contractAddress": "0x4ecdBACEBC451879294bcC2756f3FE6D47dE9c45",
    "transactionIndex": 13,
    "gasUsed": "1498889",
    "logsBloom": "0x00000000000000000010000000000000000000000000000000000000020000000000000002000000000000000000000000008000000000000000000000000000000000000000000000000000000000800002000000000000000100000000000000000000000000000000000000000000000000000000400080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000080000000000000000000000000000000000000000000100000",
    "blockHash": "0x924a3df73eb7e2d9a46597a1b5f78a76d04fbf640d2c67c100a1c40c02b91a39",
    "transactionHash": "0xf606792764ccae71dbb70fd3107a070d80f3a1028a78cb03b258a9e89dbb91f5",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 39390719,
        "transactionHash": "0xf606792764ccae71dbb70fd3107a070d80f3a1028a78cb03b258a9e89dbb91f5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cdf770392f1e5e61725cc9522c80070134d50ec7",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b3c6b2d6417e700000000000000000000000000000000000000000000000010435d0b02c2575f00000000000000000000000000000000000000000000006210788f7801ca45b90000000000000000000000000000000000000000000000001038209fd55e3f780000000000000000000000000000000000000000000000621083cbe32f2e5da0",
        "logIndex": 51,
        "blockHash": "0x924a3df73eb7e2d9a46597a1b5f78a76d04fbf640d2c67c100a1c40c02b91a39"
      }
    ],
    "blockNumber": 39390719,
    "cumulativeGasUsed": "2748777",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "08768a2f6df3e2dbb02095f6314de062",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"brandNewRegistry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"newCompany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"newPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewCompany\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"companyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"companyTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"partsArray\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AstroVerify.Company\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"viewPart\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"partId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"partName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"partTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"allOwners\",\"type\":\"address[]\"}],\"internalType\":\"struct AstroVerify.Part\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_serialNo\",\"type\":\"string\"}],\"name\":\"viewRegistry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"partId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serialNo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registryTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct AstroVerify.Registry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AstroVerify.sol\":\"AstroVerify\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/AstroVerify.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n//total parts created\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\ncontract AstroVerify{\\n    uint company_id=0;\\n    uint part_id=0;\\n\\n    struct Company{\\n        uint companyId;\\n        string companyName;\\n        uint companyTimestamp;\\n        uint[] partsArray;\\n    }\\n    \\n    struct Part{\\n        uint partId;\\n        uint price;\\n        address companyAddress;\\n        string partName;\\n        uint counter;\\n        uint totalSupply;\\n        string description;\\n        uint partTimestamp;\\n        address[] allOwners;        \\n    }\\n\\n\\n    struct Registry{\\n        uint partId;\\n        string serialNo;\\n        uint registryTimestamp;   \\n\\n    }\\n\\n    mapping (address=>Company) companyMapping;\\n    mapping(uint=>Part) partMapping;\\n    mapping (string=>Registry) registryMapping;\\n\\n\\n\\n    function newCompany(string memory _name) payable external {\\n        require(msg.value>50000000000000000, \\\"failed\\\");\\n        company_id++;\\n        companyMapping[msg.sender].companyId=company_id;\\n        companyMapping[msg.sender].companyName=_name;\\n        companyMapping[msg.sender].companyTimestamp=block.timestamp;\\n\\n    }\\n\\n    function viewCompany(address _address) public view returns(Company memory){\\n        return companyMapping[_address];\\n    }\\n\\n    function newPart(string memory _name, uint _totalSupply, string memory _description, uint _price ) public{\\n        part_id++;\\n        partMapping[part_id].partId = part_id;\\n        partMapping[part_id].companyAddress = msg.sender;\\n        partMapping[part_id].partName = _name;\\n        partMapping[part_id].totalSupply = _totalSupply;\\n        partMapping[part_id].description = _description;\\n        partMapping[part_id].partTimestamp = block.timestamp;\\n        partMapping[part_id].price = _price;\\n        partMapping[part_id].allOwners.push(msg.sender);\\n        companyMapping[msg.sender].partsArray.push(part_id);\\n        \\n    }\\n\\n    function brandNewRegistry(uint _id) external payable{\\n\\n        require(msg.value>partMapping[_id].price, \\\"not enough funds\\\");\\n        string memory theCounter= Strings.toString(++partMapping[_id].counter);\\n        string memory tempString=string.concat(Strings.toString(_id), \\\"_\\\");\\n        string memory anotherTemp = string.concat(tempString, theCounter);\\n        registryMapping[anotherTemp].serialNo = anotherTemp;\\n        registryMapping[anotherTemp].partId=_id;\\n        registryMapping[anotherTemp].registryTimestamp=block.timestamp;\\n    }\\n\\n    function viewPart(uint _id) public view returns(Part memory) {\\n        return partMapping[_id];\\n    }\\n\\n    function viewRegistry(string memory _serialNo) public view returns(Registry memory){\\n        return registryMapping[_serialNo];\\n    }\\n\\n\\n\\n    \\n    \\n    \\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n\\n}\",\"keccak256\":\"0x7144c7cfda6151f64a70544ae456ed8524b05dfbba23064cc0d1c87020512e3b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260008055600060015534801561001957600080fd5b50611a25806100296000396000f3fe6080604052600436106100595760003560e01c80633b59a45e1461006257806358a956cc1461008b57806367ce6125146100c85780636c0201ed14610105578063f1e6fe8714610142578063fb6593941461015e57610060565b3661006057005b005b34801561006e57600080fd5b5061008960048036038101906100849190610f31565b61017a565b005b34801561009757600080fd5b506100b260048036038101906100ad9190610fd0565b610395565b6040516100bf91906110f7565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea9190611119565b610473565b6040516100fc9190611309565b60405180910390f35b34801561011157600080fd5b5061012c60048036038101906101279190611357565b6106db565b604051610139919061149d565b60405180910390f35b61015c60048036038101906101579190610fd0565b610832565b005b61017860048036038101906101739190611119565b610975565b005b6001600081548092919061018d906114ee565b9190505550600154600360006001548152602001908152602001600020600001819055503360036000600154815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006001548152602001908152602001600020600301908161022d9190611742565b5082600360006001548152602001908152602001600020600501819055508160036000600154815260200190815260200160002060060190816102709190611742565b5042600360006001548152602001908152602001600020600701819055508060036000600154815260200190815260200160002060010181905550600360006001548152602001908152602001600020600801339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600154908060018154018082558091505060019003906000526020600020016000909190919091505550505050565b61039d610cf6565b6004826040516103ad9190611850565b9081526020016040518091039020604051806060016040529081600082015481526020016001820180546103e090611565565b80601f016020809104026020016040519081016040528092919081815260200182805461040c90611565565b80156104595780601f1061042e57610100808354040283529160200191610459565b820191906000526020600020905b81548152906001019060200180831161043c57829003601f168201915b505050505081526020016002820154815250509050919050565b61047b610d17565b600360008381526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461051490611565565b80601f016020809104026020016040519081016040528092919081815260200182805461054090611565565b801561058d5780601f106105625761010080835404028352916020019161058d565b820191906000526020600020905b81548152906001019060200180831161057057829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820180546105ba90611565565b80601f01602080910402602001604051908101604052809291908181526020018280546105e690611565565b80156106335780601f1061060857610100808354040283529160200191610633565b820191906000526020600020905b81548152906001019060200180831161061657829003601f168201915b5050505050815260200160078201548152602001600882018054806020026020016040519081016040528092919081815260200182805480156106cb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610681575b5050505050815250509050919050565b6106e3610d79565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201805461074790611565565b80601f016020809104026020016040519081016040528092919081815260200182805461077390611565565b80156107c05780601f10610795576101008083540402835291602001916107c0565b820191906000526020600020905b8154815290600101906020018083116107a357829003601f168201915b50505050508152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561082257602002820191906000526020600020905b81548152602001906001019080831161080e575b5050505050815250509050919050565b66b1a2bc2ec50000341161087b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610872906118c4565b60405180910390fd5b60008081548092919061088d906114ee565b9190505550600054600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908161092a9190611742565b5042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050565b600360008281526020019081526020016000206001015434116109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c490611930565b60405180910390fd5b6000610a0060036000848152602001908152602001600020600401600081546109f5906114ee565b919050819055610ad5565b90506000610a0d83610ad5565b604051602001610a1d9190611976565b604051602081830303815290604052905060008183604051602001610a4392919061199c565b604051602081830303815290604052905080600482604051610a659190611850565b90815260200160405180910390206001019081610a829190611742565b5083600482604051610a949190611850565b90815260200160405180910390206000018190555042600482604051610aba9190611850565b90815260200160405180910390206002018190555050505050565b606060006001610ae484610ba3565b01905060008167ffffffffffffffff811115610b0357610b02610dd0565b5b6040519080825280601f01601f191660200182016040528015610b355781602001600182028036833780820191505090505b509050600082602001820190505b600115610b98578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610b8c57610b8b6119c0565b5b04945060008503610b43575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610c01577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610bf757610bf66119c0565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610c3e576d04ee2d6d415b85acef81000000008381610c3457610c336119c0565b5b0492506020810190505b662386f26fc100008310610c6d57662386f26fc100008381610c6357610c626119c0565b5b0492506010810190505b6305f5e1008310610c96576305f5e1008381610c8c57610c8b6119c0565b5b0492506008810190505b6127108310610cbb576127108381610cb157610cb06119c0565b5b0492506004810190505b60648310610cde5760648381610cd457610cd36119c0565b5b0492506002810190505b600a8310610ced576001810190505b80915050919050565b60405180606001604052806000815260200160608152602001600081525090565b6040518061012001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600081526020016060815260200160008152602001606081525090565b6040518060800160405280600081526020016060815260200160008152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e0882610dbf565b810181811067ffffffffffffffff82111715610e2757610e26610dd0565b5b80604052505050565b6000610e3a610da1565b9050610e468282610dff565b919050565b600067ffffffffffffffff821115610e6657610e65610dd0565b5b610e6f82610dbf565b9050602081019050919050565b82818337600083830152505050565b6000610e9e610e9984610e4b565b610e30565b905082815260208101848484011115610eba57610eb9610dba565b5b610ec5848285610e7c565b509392505050565b600082601f830112610ee257610ee1610db5565b5b8135610ef2848260208601610e8b565b91505092915050565b6000819050919050565b610f0e81610efb565b8114610f1957600080fd5b50565b600081359050610f2b81610f05565b92915050565b60008060008060808587031215610f4b57610f4a610dab565b5b600085013567ffffffffffffffff811115610f6957610f68610db0565b5b610f7587828801610ecd565b9450506020610f8687828801610f1c565b935050604085013567ffffffffffffffff811115610fa757610fa6610db0565b5b610fb387828801610ecd565b9250506060610fc487828801610f1c565b91505092959194509250565b600060208284031215610fe657610fe5610dab565b5b600082013567ffffffffffffffff81111561100457611003610db0565b5b61101084828501610ecd565b91505092915050565b61102281610efb565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611062578082015181840152602081019050611047565b60008484015250505050565b600061107982611028565b6110838185611033565b9350611093818560208601611044565b61109c81610dbf565b840191505092915050565b60006060830160008301516110bf6000860182611019565b50602083015184820360208601526110d7828261106e565b91505060408301516110ec6040860182611019565b508091505092915050565b6000602082019050818103600083015261111181846110a7565b905092915050565b60006020828403121561112f5761112e610dab565b5b600061113d84828501610f1c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061117182611146565b9050919050565b61118181611166565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006111bf8383611178565b60208301905092915050565b6000602082019050919050565b60006111e382611187565b6111ed8185611192565b93506111f8836111a3565b8060005b8381101561122957815161121088826111b3565b975061121b836111cb565b9250506001810190506111fc565b5085935050505092915050565b60006101208301600083015161124f6000860182611019565b5060208301516112626020860182611019565b5060408301516112756040860182611178565b506060830151848203606086015261128d828261106e565b91505060808301516112a26080860182611019565b5060a08301516112b560a0860182611019565b5060c083015184820360c08601526112cd828261106e565b91505060e08301516112e260e0860182611019565b506101008301518482036101008601526112fc82826111d8565b9150508091505092915050565b600060208201905081810360008301526113238184611236565b905092915050565b61133481611166565b811461133f57600080fd5b50565b6000813590506113518161132b565b92915050565b60006020828403121561136d5761136c610dab565b5b600061137b84828501611342565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006113bc8383611019565b60208301905092915050565b6000602082019050919050565b60006113e082611384565b6113ea818561138f565b93506113f5836113a0565b8060005b8381101561142657815161140d88826113b0565b9750611418836113c8565b9250506001810190506113f9565b5085935050505092915050565b600060808301600083015161144b6000860182611019565b5060208301518482036020860152611463828261106e565b91505060408301516114786040860182611019565b506060830151848203606086015261149082826113d5565b9150508091505092915050565b600060208201905081810360008301526114b78184611433565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114f982610efb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361152b5761152a6114bf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061157d57607f821691505b6020821081036115905761158f611536565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026115f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826115bb565b61160286836115bb565b95508019841693508086168417925050509392505050565b6000819050919050565b600061163f61163a61163584610efb565b61161a565b610efb565b9050919050565b6000819050919050565b61165983611624565b61166d61166582611646565b8484546115c8565b825550505050565b600090565b611682611675565b61168d818484611650565b505050565b5b818110156116b1576116a660008261167a565b600181019050611693565b5050565b601f8211156116f6576116c781611596565b6116d0846115ab565b810160208510156116df578190505b6116f36116eb856115ab565b830182611692565b50505b505050565b600082821c905092915050565b6000611719600019846008026116fb565b1980831691505092915050565b60006117328383611708565b9150826002028217905092915050565b61174b82611028565b67ffffffffffffffff81111561176457611763610dd0565b5b61176e8254611565565b6117798282856116b5565b600060209050601f8311600181146117ac576000841561179a578287015190505b6117a48582611726565b86555061180c565b601f1984166117ba86611596565b60005b828110156117e2578489015182556001820191506020850194506020810190506117bd565b868310156117ff57848901516117fb601f891682611708565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600061182a82611028565b6118348185611814565b9350611844818560208601611044565b80840191505092915050565b600061185c828461181f565b915081905092915050565b600082825260208201905092915050565b7f6661696c65640000000000000000000000000000000000000000000000000000600082015250565b60006118ae600683611867565b91506118b982611878565b602082019050919050565b600060208201905081810360008301526118dd816118a1565b9050919050565b7f6e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b600061191a601083611867565b9150611925826118e4565b602082019050919050565b600060208201905081810360008301526119498161190d565b9050919050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b6000611982828461181f565b915061198d82611950565b60018201915081905092915050565b60006119a8828561181f565b91506119b4828461181f565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220e255f5e9957fa735ba6a2617684a180c7814f65cba4bf17ed3016da8442200a664736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100595760003560e01c80633b59a45e1461006257806358a956cc1461008b57806367ce6125146100c85780636c0201ed14610105578063f1e6fe8714610142578063fb6593941461015e57610060565b3661006057005b005b34801561006e57600080fd5b5061008960048036038101906100849190610f31565b61017a565b005b34801561009757600080fd5b506100b260048036038101906100ad9190610fd0565b610395565b6040516100bf91906110f7565b60405180910390f35b3480156100d457600080fd5b506100ef60048036038101906100ea9190611119565b610473565b6040516100fc9190611309565b60405180910390f35b34801561011157600080fd5b5061012c60048036038101906101279190611357565b6106db565b604051610139919061149d565b60405180910390f35b61015c60048036038101906101579190610fd0565b610832565b005b61017860048036038101906101739190611119565b610975565b005b6001600081548092919061018d906114ee565b9190505550600154600360006001548152602001908152602001600020600001819055503360036000600154815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600360006001548152602001908152602001600020600301908161022d9190611742565b5082600360006001548152602001908152602001600020600501819055508160036000600154815260200190815260200160002060060190816102709190611742565b5042600360006001548152602001908152602001600020600701819055508060036000600154815260200190815260200160002060010181905550600360006001548152602001908152602001600020600801339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600154908060018154018082558091505060019003906000526020600020016000909190919091505550505050565b61039d610cf6565b6004826040516103ad9190611850565b9081526020016040518091039020604051806060016040529081600082015481526020016001820180546103e090611565565b80601f016020809104026020016040519081016040528092919081815260200182805461040c90611565565b80156104595780601f1061042e57610100808354040283529160200191610459565b820191906000526020600020905b81548152906001019060200180831161043c57829003601f168201915b505050505081526020016002820154815250509050919050565b61047b610d17565b600360008381526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461051490611565565b80601f016020809104026020016040519081016040528092919081815260200182805461054090611565565b801561058d5780601f106105625761010080835404028352916020019161058d565b820191906000526020600020905b81548152906001019060200180831161057057829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820180546105ba90611565565b80601f01602080910402602001604051908101604052809291908181526020018280546105e690611565565b80156106335780601f1061060857610100808354040283529160200191610633565b820191906000526020600020905b81548152906001019060200180831161061657829003601f168201915b5050505050815260200160078201548152602001600882018054806020026020016040519081016040528092919081815260200182805480156106cb57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610681575b5050505050815250509050919050565b6106e3610d79565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201805461074790611565565b80601f016020809104026020016040519081016040528092919081815260200182805461077390611565565b80156107c05780601f10610795576101008083540402835291602001916107c0565b820191906000526020600020905b8154815290600101906020018083116107a357829003601f168201915b50505050508152602001600282015481526020016003820180548060200260200160405190810160405280929190818152602001828054801561082257602002820191906000526020600020905b81548152602001906001019080831161080e575b5050505050815250509050919050565b66b1a2bc2ec50000341161087b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610872906118c4565b60405180910390fd5b60008081548092919061088d906114ee565b9190505550600054600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908161092a9190611742565b5042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050565b600360008281526020019081526020016000206001015434116109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c490611930565b60405180910390fd5b6000610a0060036000848152602001908152602001600020600401600081546109f5906114ee565b919050819055610ad5565b90506000610a0d83610ad5565b604051602001610a1d9190611976565b604051602081830303815290604052905060008183604051602001610a4392919061199c565b604051602081830303815290604052905080600482604051610a659190611850565b90815260200160405180910390206001019081610a829190611742565b5083600482604051610a949190611850565b90815260200160405180910390206000018190555042600482604051610aba9190611850565b90815260200160405180910390206002018190555050505050565b606060006001610ae484610ba3565b01905060008167ffffffffffffffff811115610b0357610b02610dd0565b5b6040519080825280601f01601f191660200182016040528015610b355781602001600182028036833780820191505090505b509050600082602001820190505b600115610b98578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610b8c57610b8b6119c0565b5b04945060008503610b43575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610c01577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610bf757610bf66119c0565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610c3e576d04ee2d6d415b85acef81000000008381610c3457610c336119c0565b5b0492506020810190505b662386f26fc100008310610c6d57662386f26fc100008381610c6357610c626119c0565b5b0492506010810190505b6305f5e1008310610c96576305f5e1008381610c8c57610c8b6119c0565b5b0492506008810190505b6127108310610cbb576127108381610cb157610cb06119c0565b5b0492506004810190505b60648310610cde5760648381610cd457610cd36119c0565b5b0492506002810190505b600a8310610ced576001810190505b80915050919050565b60405180606001604052806000815260200160608152602001600081525090565b6040518061012001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600081526020016060815260200160008152602001606081525090565b6040518060800160405280600081526020016060815260200160008152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610e0882610dbf565b810181811067ffffffffffffffff82111715610e2757610e26610dd0565b5b80604052505050565b6000610e3a610da1565b9050610e468282610dff565b919050565b600067ffffffffffffffff821115610e6657610e65610dd0565b5b610e6f82610dbf565b9050602081019050919050565b82818337600083830152505050565b6000610e9e610e9984610e4b565b610e30565b905082815260208101848484011115610eba57610eb9610dba565b5b610ec5848285610e7c565b509392505050565b600082601f830112610ee257610ee1610db5565b5b8135610ef2848260208601610e8b565b91505092915050565b6000819050919050565b610f0e81610efb565b8114610f1957600080fd5b50565b600081359050610f2b81610f05565b92915050565b60008060008060808587031215610f4b57610f4a610dab565b5b600085013567ffffffffffffffff811115610f6957610f68610db0565b5b610f7587828801610ecd565b9450506020610f8687828801610f1c565b935050604085013567ffffffffffffffff811115610fa757610fa6610db0565b5b610fb387828801610ecd565b9250506060610fc487828801610f1c565b91505092959194509250565b600060208284031215610fe657610fe5610dab565b5b600082013567ffffffffffffffff81111561100457611003610db0565b5b61101084828501610ecd565b91505092915050565b61102281610efb565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611062578082015181840152602081019050611047565b60008484015250505050565b600061107982611028565b6110838185611033565b9350611093818560208601611044565b61109c81610dbf565b840191505092915050565b60006060830160008301516110bf6000860182611019565b50602083015184820360208601526110d7828261106e565b91505060408301516110ec6040860182611019565b508091505092915050565b6000602082019050818103600083015261111181846110a7565b905092915050565b60006020828403121561112f5761112e610dab565b5b600061113d84828501610f1c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061117182611146565b9050919050565b61118181611166565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006111bf8383611178565b60208301905092915050565b6000602082019050919050565b60006111e382611187565b6111ed8185611192565b93506111f8836111a3565b8060005b8381101561122957815161121088826111b3565b975061121b836111cb565b9250506001810190506111fc565b5085935050505092915050565b60006101208301600083015161124f6000860182611019565b5060208301516112626020860182611019565b5060408301516112756040860182611178565b506060830151848203606086015261128d828261106e565b91505060808301516112a26080860182611019565b5060a08301516112b560a0860182611019565b5060c083015184820360c08601526112cd828261106e565b91505060e08301516112e260e0860182611019565b506101008301518482036101008601526112fc82826111d8565b9150508091505092915050565b600060208201905081810360008301526113238184611236565b905092915050565b61133481611166565b811461133f57600080fd5b50565b6000813590506113518161132b565b92915050565b60006020828403121561136d5761136c610dab565b5b600061137b84828501611342565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006113bc8383611019565b60208301905092915050565b6000602082019050919050565b60006113e082611384565b6113ea818561138f565b93506113f5836113a0565b8060005b8381101561142657815161140d88826113b0565b9750611418836113c8565b9250506001810190506113f9565b5085935050505092915050565b600060808301600083015161144b6000860182611019565b5060208301518482036020860152611463828261106e565b91505060408301516114786040860182611019565b506060830151848203606086015261149082826113d5565b9150508091505092915050565b600060208201905081810360008301526114b78184611433565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114f982610efb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361152b5761152a6114bf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061157d57607f821691505b6020821081036115905761158f611536565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026115f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826115bb565b61160286836115bb565b95508019841693508086168417925050509392505050565b6000819050919050565b600061163f61163a61163584610efb565b61161a565b610efb565b9050919050565b6000819050919050565b61165983611624565b61166d61166582611646565b8484546115c8565b825550505050565b600090565b611682611675565b61168d818484611650565b505050565b5b818110156116b1576116a660008261167a565b600181019050611693565b5050565b601f8211156116f6576116c781611596565b6116d0846115ab565b810160208510156116df578190505b6116f36116eb856115ab565b830182611692565b50505b505050565b600082821c905092915050565b6000611719600019846008026116fb565b1980831691505092915050565b60006117328383611708565b9150826002028217905092915050565b61174b82611028565b67ffffffffffffffff81111561176457611763610dd0565b5b61176e8254611565565b6117798282856116b5565b600060209050601f8311600181146117ac576000841561179a578287015190505b6117a48582611726565b86555061180c565b601f1984166117ba86611596565b60005b828110156117e2578489015182556001820191506020850194506020810190506117bd565b868310156117ff57848901516117fb601f891682611708565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b600061182a82611028565b6118348185611814565b9350611844818560208601611044565b80840191505092915050565b600061185c828461181f565b915081905092915050565b600082825260208201905092915050565b7f6661696c65640000000000000000000000000000000000000000000000000000600082015250565b60006118ae600683611867565b91506118b982611878565b602082019050919050565b600060208201905081810360008301526118dd816118a1565b9050919050565b7f6e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b600061191a601083611867565b9150611925826118e4565b602082019050919050565b600060208201905081810360008301526119498161190d565b9050919050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b6000611982828461181f565b915061198d82611950565b60018201915081905092915050565b60006119a8828561181f565b91506119b4828461181f565b91508190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220e255f5e9957fa735ba6a2617684a180c7814f65cba4bf17ed3016da8442200a664736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1205,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "company_id",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1208,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "part_id",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1250,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "companyMapping",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Company)1218_storage)"
      },
      {
        "astId": 1255,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "partMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Part)1238_storage)"
      },
      {
        "astId": 1260,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "registryMapping",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Registry)1245_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Company)1218_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AstroVerify.Company)",
        "numberOfBytes": "32",
        "value": "t_struct(Company)1218_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Registry)1245_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct AstroVerify.Registry)",
        "numberOfBytes": "32",
        "value": "t_struct(Registry)1245_storage"
      },
      "t_mapping(t_uint256,t_struct(Part)1238_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AstroVerify.Part)",
        "numberOfBytes": "32",
        "value": "t_struct(Part)1238_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Company)1218_storage": {
        "encoding": "inplace",
        "label": "struct AstroVerify.Company",
        "members": [
          {
            "astId": 1210,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1212,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1214,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1217,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partsArray",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Part)1238_storage": {
        "encoding": "inplace",
        "label": "struct AstroVerify.Part",
        "members": [
          {
            "astId": 1220,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1222,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1224,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1226,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1228,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "counter",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1230,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "totalSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1232,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "description",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1234,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1237,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "allOwners",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Registry)1245_storage": {
        "encoding": "inplace",
        "label": "struct AstroVerify.Registry",
        "members": [
          {
            "astId": 1240,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1242,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "serialNo",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1244,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "registryTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}