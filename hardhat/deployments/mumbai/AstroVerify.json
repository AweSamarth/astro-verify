{
  "address": "0x6Bfdb5ff147e677AFAc15A0601528baF99f0aA23",
  "abi": [
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "company_id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "newCompany",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_imageUrl",
          "type": "string"
        }
      ],
      "name": "newPart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "newRegistry",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "part_id",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uselessFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "viewCompany",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "companyId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "companyName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "companyTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "partsArray",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct AstroVerify.Company",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "viewPart",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "partId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "companyAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "partName",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "counter",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalSupply",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "partTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            }
          ],
          "internalType": "struct AstroVerify.Part",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_serialNo",
          "type": "string"
        }
      ],
      "name": "viewRegistry",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "partId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "serialNo",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "registryTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct AstroVerify.Registry",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x01962c42e1c3e76306db4d30cb43e61543cfa1001002bd43ca69909ae3d08d82",
  "receipt": {
    "to": null,
    "from": "0xCDF770392F1E5E61725Cc9522c80070134D50eC7",
    "contractAddress": "0x6Bfdb5ff147e677AFAc15A0601528baF99f0aA23",
    "transactionIndex": 12,
    "gasUsed": "1685482",
    "logsBloom": "0x
    "blockHash": "0xfcc05e57cf9c65291eb764ae1e9c10f075294ed4dbf553e6033580be63ee5c9b",
    "transactionHash": "0x01962c42e1c3e76306db4d30cb43e61543cfa1001002bd43ca69909ae3d08d82",
    "logs": [
      {
        "transactionIndex": 12,
        "blockNumber": 39411468,
        "transactionHash": "0x01962c42e1c3e76306db4d30cb43e61543cfa1001002bd43ca69909ae3d08d82",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000cdf770392f1e5e61725cc9522c80070134d50ec7",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000008fb67c9d3f6000000000000000000000000000000000000000000000000001bd08f8d71aa140100000000000000000000000000000000000000000000215ca8d3dde1957076230000000000000000000000000000000000000000000000001bc79425a7d61e0100000000000000000000000000000000000000000000215ca8dcd9495f446c23",
        "logIndex": 45,
        "blockHash": "0xfcc05e57cf9c65291eb764ae1e9c10f075294ed4dbf553e6033580be63ee5c9b"
      }
    ],
    "blockNumber": 39411468,
    "cumulativeGasUsed": "2855788",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "2e7bc4a8274cc510da5c6a74f0c81bd2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"company_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"newCompany\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageUrl\",\"type\":\"string\"}],\"name\":\"newPart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"newRegistry\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"part_id\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uselessFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"viewCompany\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"companyId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"companyName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"companyTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"partsArray\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AstroVerify.Company\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"viewPart\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"partId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"companyAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"partName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"partTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"}],\"internalType\":\"struct AstroVerify.Part\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_serialNo\",\"type\":\"string\"}],\"name\":\"viewRegistry\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"partId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serialNo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"registryTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct AstroVerify.Registry\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AstroVerify.sol\":\"AstroVerify\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/AstroVerify.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n\\ncontract AstroVerify{\\n    uint public company_id=0;\\n    uint public part_id=0;\\n\\n    struct Company{\\n        uint companyId;\\n        string companyName;\\n        uint companyTimestamp;\\n        uint[] partsArray;\\n    }\\n    \\n    struct Part{\\n        uint partId;\\n        uint price;\\n        address companyAddress;\\n        string partName;\\n        uint counter;\\n        uint totalSupply;\\n        string description;\\n        uint partTimestamp;\\n        string imageUrl;\\n    }\\n\\n\\n    struct Registry{\\n        uint partId;\\n        string serialNo;\\n        uint registryTimestamp;\\n        address owner;   \\n\\n    }\\n\\n    mapping (address=>Company) companyMapping;\\n    mapping(uint=>Part) partMapping;\\n    mapping (string=>Registry) registryMapping;\\n\\n\\n\\n    function newCompany(string memory _name) payable external {\\n        require(msg.value>50000000000000000, \\\"failed\\\");\\n        company_id++;\\n        companyMapping[msg.sender].companyId=company_id;\\n        companyMapping[msg.sender].companyName=_name;\\n        companyMapping[msg.sender].companyTimestamp=block.timestamp;\\n\\n    }\\n\\n    function viewCompany(address _address) public view returns(Company memory){\\n        return companyMapping[_address];\\n    }\\n\\n    function newPart(string memory _name, uint _totalSupply, string memory _description, uint _price, string memory _imageUrl ) public{\\n        part_id++;\\n        partMapping[part_id].partId = part_id;\\n        partMapping[part_id].companyAddress = msg.sender;\\n        partMapping[part_id].partName = _name;\\n        partMapping[part_id].totalSupply = _totalSupply;\\n        partMapping[part_id].description = _description;\\n        partMapping[part_id].partTimestamp = block.timestamp;\\n        partMapping[part_id].price = _price;\\n        partMapping[part_id].imageUrl=_imageUrl;\\n        companyMapping[msg.sender].partsArray.push(part_id);\\n        \\n    }\\n\\n    function newRegistry(uint _id) external payable{\\n        require(partMapping[_id].counter<=partMapping[_id].totalSupply, \\\"max limit exceeded\\\");\\n        require(msg.value>partMapping[_id].price, \\\"not enough funds\\\");\\n        address payable ownerAddress = payable(partMapping[_id].companyAddress);\\n\\n\\n        string memory theCounter= Strings.toString(++partMapping[_id].counter);\\n        string memory tempString=string.concat(Strings.toString(_id), \\\"_\\\");\\n        string memory anotherTemp = string.concat(tempString, theCounter);\\n        registryMapping[anotherTemp].serialNo = anotherTemp;\\n        registryMapping[anotherTemp].partId=_id;\\n        registryMapping[anotherTemp].registryTimestamp=block.timestamp;\\n        registryMapping[anotherTemp].owner=msg.sender;\\n\\n        (bool sent, ) = ownerAddress.call{value: msg.value}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n    }\\n\\n    function viewPart(uint _id) public view returns(Part memory) {\\n        return partMapping[_id];\\n    }\\n\\n    function viewRegistry(string memory _serialNo) public view returns(Registry memory){\\n        return registryMapping[_serialNo];\\n    }\\n\\n    function uselessFunction() public {\\n           \\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n\\n\\n}\",\"keccak256\":\"0xf5a7b4f69abb442a12a56b74d74107fa9cb3beb5d95951e400e52123ace9a3ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260008055600060015534801561001957600080fd5b50611d8a806100296000396000f3fe60806040526004361061008a5760003560e01c806367ce61251161005957806367ce61251461012e5780636c0201ed1461016b57806376cb62bf146101a8578063c2ad1b1d146101d3578063f1e6fe87146101fc57610091565b806308ef1b121461009357806321c9af56146100aa57806358a956cc146100d557806360b1b0ee1461011257610091565b3661009157005b005b34801561009f57600080fd5b506100a8610218565b005b3480156100b657600080fd5b506100bf61021a565b6040516100cc9190611043565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f791906111b8565b610220565b6040516101099190611333565b60405180910390f35b61012c60048036038101906101279190611381565b610354565b005b34801561013a57600080fd5b5061015560048036038101906101509190611381565b61066c565b6040516101629190611481565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d91906114cf565b6108d8565b60405161019f9190611615565b60405180910390f35b3480156101b457600080fd5b506101bd610a2f565b6040516101ca9190611043565b60405180910390f35b3480156101df57600080fd5b506101fa60048036038101906101f59190611637565b610a35565b005b610216600480360381019061021191906111b8565b610bfe565b005b565b60015481565b610228610f62565b6004826040516102389190611742565b90815260200160405180910390206040518060800160405290816000820154815260200160018201805461026b90611788565b80601f016020809104026020016040519081016040528092919081815260200182805461029790611788565b80156102e45780601f106102b9576101008083540402835291602001916102e4565b820191906000526020600020905b8154815290600101906020018083116102c757829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6003600082815260200190815260200160002060050154600360008381526020019081526020016000206004015411156103c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ba90611816565b60405180910390fd5b6003600082815260200190815260200160002060010154341161041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041290611882565b60405180910390fd5b60006003600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610489600360008581526020019081526020016000206004016000815461047e906118d1565b919050819055610d41565b9050600061049684610d41565b6040516020016104a6919061193f565b6040516020818303038152906040529050600081836040516020016104cc929190611965565b6040516020818303038152906040529050806004826040516104ee9190611742565b9081526020016040518091039020600101908161050b9190611b35565b508460048260405161051d9190611742565b908152602001604051809103902060000181905550426004826040516105439190611742565b908152602001604051809103902060020181905550336004826040516105699190611742565b908152602001604051809103902060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008473ffffffffffffffffffffffffffffffffffffffff16346040516105de90611c38565b60006040518083038185875af1925050503d806000811461061b576040519150601f19603f3d011682016040523d82523d6000602084013e610620565b606091505b5050905080610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b90611c99565b60405180910390fd5b505050505050565b610674610fa0565b600360008381526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461070d90611788565b80601f016020809104026020016040519081016040528092919081815260200182805461073990611788565b80156107865780601f1061075b57610100808354040283529160200191610786565b820191906000526020600020905b81548152906001019060200180831161076957829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820180546107b390611788565b80601f01602080910402602001604051908101604052809291908181526020018280546107df90611788565b801561082c5780601f106108015761010080835404028352916020019161082c565b820191906000526020600020905b81548152906001019060200180831161080f57829003601f168201915b505050505081526020016007820154815260200160088201805461084f90611788565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90611788565b80156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b5050505050815250509050919050565b6108e0611002565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201805461094490611788565b80601f016020809104026020016040519081016040528092919081815260200182805461097090611788565b80156109bd5780601f10610992576101008083540402835291602001916109bd565b820191906000526020600020905b8154815290600101906020018083116109a057829003601f168201915b505050505081526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015610a1f57602002820191906000526020600020905b815481526020019060010190808311610a0b575b5050505050815250509050919050565b60005481565b60016000815480929190610a48906118d1565b9190505550600154600360006001548152602001908152602001600020600001819055503360036000600154815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846003600060015481526020019081526020016000206003019081610ae89190611b35565b508360036000600154815260200190815260200160002060050181905550826003600060015481526020019081526020016000206006019081610b2b9190611b35565b5042600360006001548152602001908152602001600020600701819055508160036000600154815260200190815260200160002060010181905550806003600060015481526020019081526020016000206008019081610b8b9190611b35565b50600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160015490806001815401808255809150506001900390600052602060002001600090919091909150555050505050565b66b1a2bc2ec500003411610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90611d05565b60405180910390fd5b600080815480929190610c59906118d1565b9190505550600054600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019081610cf69190611b35565b5042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050565b606060006001610d5084610e0f565b01905060008167ffffffffffffffff811115610d6f57610d6e61108d565b5b6040519080825280601f01601f191660200182016040528015610da15781602001600182028036833780820191505090505b509050600082602001820190505b600115610e04578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610df857610df7611d25565b5b04945060008503610daf575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610e6d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610e6357610e62611d25565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610eaa576d04ee2d6d415b85acef81000000008381610ea057610e9f611d25565b5b0492506020810190505b662386f26fc100008310610ed957662386f26fc100008381610ecf57610ece611d25565b5b0492506010810190505b6305f5e1008310610f02576305f5e1008381610ef857610ef7611d25565b5b0492506008810190505b6127108310610f27576127108381610f1d57610f1c611d25565b5b0492506004810190505b60648310610f4a5760648381610f4057610f3f611d25565b5b0492506002810190505b600a8310610f59576001810190505b80915050919050565b6040518060800160405280600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518061012001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600081526020016060815260200160008152602001606081525090565b6040518060800160405280600081526020016060815260200160008152602001606081525090565b6000819050919050565b61103d8161102a565b82525050565b60006020820190506110586000830184611034565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110c58261107c565b810181811067ffffffffffffffff821117156110e4576110e361108d565b5b80604052505050565b60006110f761105e565b905061110382826110bc565b919050565b600067ffffffffffffffff8211156111235761112261108d565b5b61112c8261107c565b9050602081019050919050565b82818337600083830152505050565b600061115b61115684611108565b6110ed565b90508281526020810184848401111561117757611176611077565b5b611182848285611139565b509392505050565b600082601f83011261119f5761119e611072565b5b81356111af848260208601611148565b91505092915050565b6000602082840312156111ce576111cd611068565b5b600082013567ffffffffffffffff8111156111ec576111eb61106d565b5b6111f88482850161118a565b91505092915050565b61120a8161102a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561124a57808201518184015260208101905061122f565b60008484015250505050565b600061126182611210565b61126b818561121b565b935061127b81856020860161122c565b6112848161107c565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112ba8261128f565b9050919050565b6112ca816112af565b82525050565b60006080830160008301516112e86000860182611201565b50602083015184820360208601526113008282611256565b91505060408301516113156040860182611201565b50606083015161132860608601826112c1565b508091505092915050565b6000602082019050818103600083015261134d81846112d0565b905092915050565b61135e8161102a565b811461136957600080fd5b50565b60008135905061137b81611355565b92915050565b60006020828403121561139757611396611068565b5b60006113a58482850161136c565b91505092915050565b6000610120830160008301516113c76000860182611201565b5060208301516113da6020860182611201565b5060408301516113ed60408601826112c1565b50606083015184820360608601526114058282611256565b915050608083015161141a6080860182611201565b5060a083015161142d60a0860182611201565b5060c083015184820360c08601526114458282611256565b91505060e083015161145a60e0860182611201565b506101008301518482036101008601526114748282611256565b9150508091505092915050565b6000602082019050818103600083015261149b81846113ae565b905092915050565b6114ac816112af565b81146114b757600080fd5b50565b6000813590506114c9816114a3565b92915050565b6000602082840312156114e5576114e4611068565b5b60006114f3848285016114ba565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006115348383611201565b60208301905092915050565b6000602082019050919050565b6000611558826114fc565b6115628185611507565b935061156d83611518565b8060005b8381101561159e5781516115858882611528565b975061159083611540565b925050600181019050611571565b5085935050505092915050565b60006080830160008301516115c36000860182611201565b50602083015184820360208601526115db8282611256565b91505060408301516115f06040860182611201565b5060608301518482036060860152611608828261154d565b9150508091505092915050565b6000602082019050818103600083015261162f81846115ab565b905092915050565b600080600080600060a0868803121561165357611652611068565b5b600086013567ffffffffffffffff8111156116715761167061106d565b5b61167d8882890161118a565b955050602061168e8882890161136c565b945050604086013567ffffffffffffffff8111156116af576116ae61106d565b5b6116bb8882890161118a565b93505060606116cc8882890161136c565b925050608086013567ffffffffffffffff8111156116ed576116ec61106d565b5b6116f98882890161118a565b9150509295509295909350565b600081905092915050565b600061171c82611210565b6117268185611706565b935061173681856020860161122c565b80840191505092915050565b600061174e8284611711565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806117a057607f821691505b6020821081036117b3576117b2611759565b5b50919050565b600082825260208201905092915050565b7f6d6178206c696d69742065786365656465640000000000000000000000000000600082015250565b60006118006012836117b9565b915061180b826117ca565b602082019050919050565b6000602082019050818103600083015261182f816117f3565b9050919050565b7f6e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b600061186c6010836117b9565b915061187782611836565b602082019050919050565b6000602082019050818103600083015261189b8161185f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118dc8261102a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361190e5761190d6118a2565b5b600182019050919050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b600061194b8284611711565b915061195682611919565b60018201915081905092915050565b60006119718285611711565b915061197d8284611711565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026119eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826119ae565b6119f586836119ae565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611a32611a2d611a288461102a565b611a0d565b61102a565b9050919050565b6000819050919050565b611a4c83611a17565b611a60611a5882611a39565b8484546119bb565b825550505050565b600090565b611a75611a68565b611a80818484611a43565b505050565b5b81811015611aa457611a99600082611a6d565b600181019050611a86565b5050565b601f821115611ae957611aba81611989565b611ac38461199e565b81016020851015611ad2578190505b611ae6611ade8561199e565b830182611a85565b50505b505050565b600082821c905092915050565b6000611b0c60001984600802611aee565b1980831691505092915050565b6000611b258383611afb565b9150826002028217905092915050565b611b3e82611210565b67ffffffffffffffff811115611b5757611b5661108d565b5b611b618254611788565b611b6c828285611aa8565b600060209050601f831160018114611b9f5760008415611b8d578287015190505b611b978582611b19565b865550611bff565b601f198416611bad86611989565b60005b82811015611bd557848901518255600182019150602085019450602081019050611bb0565b86831015611bf25784890151611bee601f891682611afb565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b50565b6000611c22600083611c07565b9150611c2d82611c12565b600082019050919050565b6000611c4382611c15565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000611c836014836117b9565b9150611c8e82611c4d565b602082019050919050565b60006020820190508181036000830152611cb281611c76565b9050919050565b7f6661696c65640000000000000000000000000000000000000000000000000000600082015250565b6000611cef6006836117b9565b9150611cfa82611cb9565b602082019050919050565b60006020820190508181036000830152611d1e81611ce2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220dac0894f9beb9afd1d40634f8e6288f94119d1ce5b4183d64d772582a34c71ea64736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c806367ce61251161005957806367ce61251461012e5780636c0201ed1461016b57806376cb62bf146101a8578063c2ad1b1d146101d3578063f1e6fe87146101fc57610091565b806308ef1b121461009357806321c9af56146100aa57806358a956cc146100d557806360b1b0ee1461011257610091565b3661009157005b005b34801561009f57600080fd5b506100a8610218565b005b3480156100b657600080fd5b506100bf61021a565b6040516100cc9190611043565b60405180910390f35b3480156100e157600080fd5b506100fc60048036038101906100f791906111b8565b610220565b6040516101099190611333565b60405180910390f35b61012c60048036038101906101279190611381565b610354565b005b34801561013a57600080fd5b5061015560048036038101906101509190611381565b61066c565b6040516101629190611481565b60405180910390f35b34801561017757600080fd5b50610192600480360381019061018d91906114cf565b6108d8565b60405161019f9190611615565b60405180910390f35b3480156101b457600080fd5b506101bd610a2f565b6040516101ca9190611043565b60405180910390f35b3480156101df57600080fd5b506101fa60048036038101906101f59190611637565b610a35565b005b610216600480360381019061021191906111b8565b610bfe565b005b565b60015481565b610228610f62565b6004826040516102389190611742565b90815260200160405180910390206040518060800160405290816000820154815260200160018201805461026b90611788565b80601f016020809104026020016040519081016040528092919081815260200182805461029790611788565b80156102e45780601f106102b9576101008083540402835291602001916102e4565b820191906000526020600020905b8154815290600101906020018083116102c757829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b6003600082815260200190815260200160002060050154600360008381526020019081526020016000206004015411156103c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ba90611816565b60405180910390fd5b6003600082815260200190815260200160002060010154341161041b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041290611882565b60405180910390fd5b60006003600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610489600360008581526020019081526020016000206004016000815461047e906118d1565b919050819055610d41565b9050600061049684610d41565b6040516020016104a6919061193f565b6040516020818303038152906040529050600081836040516020016104cc929190611965565b6040516020818303038152906040529050806004826040516104ee9190611742565b9081526020016040518091039020600101908161050b9190611b35565b508460048260405161051d9190611742565b908152602001604051809103902060000181905550426004826040516105439190611742565b908152602001604051809103902060020181905550336004826040516105699190611742565b908152602001604051809103902060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008473ffffffffffffffffffffffffffffffffffffffff16346040516105de90611c38565b60006040518083038185875af1925050503d806000811461061b576040519150601f19603f3d011682016040523d82523d6000602084013e610620565b606091505b5050905080610664576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065b90611c99565b60405180910390fd5b505050505050565b610674610fa0565b600360008381526020019081526020016000206040518061012001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461070d90611788565b80601f016020809104026020016040519081016040528092919081815260200182805461073990611788565b80156107865780601f1061075b57610100808354040283529160200191610786565b820191906000526020600020905b81548152906001019060200180831161076957829003601f168201915b5050505050815260200160048201548152602001600582015481526020016006820180546107b390611788565b80601f01602080910402602001604051908101604052809291908181526020018280546107df90611788565b801561082c5780601f106108015761010080835404028352916020019161082c565b820191906000526020600020905b81548152906001019060200180831161080f57829003601f168201915b505050505081526020016007820154815260200160088201805461084f90611788565b80601f016020809104026020016040519081016040528092919081815260200182805461087b90611788565b80156108c85780601f1061089d576101008083540402835291602001916108c8565b820191906000526020600020905b8154815290600101906020018083116108ab57829003601f168201915b5050505050815250509050919050565b6108e0611002565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820154815260200160018201805461094490611788565b80601f016020809104026020016040519081016040528092919081815260200182805461097090611788565b80156109bd5780601f10610992576101008083540402835291602001916109bd565b820191906000526020600020905b8154815290600101906020018083116109a057829003601f168201915b505050505081526020016002820154815260200160038201805480602002602001604051908101604052809291908181526020018280548015610a1f57602002820191906000526020600020905b815481526020019060010190808311610a0b575b5050505050815250509050919050565b60005481565b60016000815480929190610a48906118d1565b9190505550600154600360006001548152602001908152602001600020600001819055503360036000600154815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550846003600060015481526020019081526020016000206003019081610ae89190611b35565b508360036000600154815260200190815260200160002060050181905550826003600060015481526020019081526020016000206006019081610b2b9190611b35565b5042600360006001548152602001908152602001600020600701819055508160036000600154815260200190815260200160002060010181905550806003600060015481526020019081526020016000206008019081610b8b9190611b35565b50600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160015490806001815401808255809150506001900390600052602060002001600090919091909150555050505050565b66b1a2bc2ec500003411610c47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3e90611d05565b60405180910390fd5b600080815480929190610c59906118d1565b9190505550600054600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001019081610cf69190611b35565b5042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050565b606060006001610d5084610e0f565b01905060008167ffffffffffffffff811115610d6f57610d6e61108d565b5b6040519080825280601f01601f191660200182016040528015610da15781602001600182028036833780820191505090505b509050600082602001820190505b600115610e04578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581610df857610df7611d25565b5b04945060008503610daf575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610e6d577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381610e6357610e62611d25565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310610eaa576d04ee2d6d415b85acef81000000008381610ea057610e9f611d25565b5b0492506020810190505b662386f26fc100008310610ed957662386f26fc100008381610ecf57610ece611d25565b5b0492506010810190505b6305f5e1008310610f02576305f5e1008381610ef857610ef7611d25565b5b0492506008810190505b6127108310610f27576127108381610f1d57610f1c611d25565b5b0492506004810190505b60648310610f4a5760648381610f4057610f3f611d25565b5b0492506002810190505b600a8310610f59576001810190505b80915050919050565b6040518060800160405280600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518061012001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001600081526020016060815260200160008152602001606081525090565b6040518060800160405280600081526020016060815260200160008152602001606081525090565b6000819050919050565b61103d8161102a565b82525050565b60006020820190506110586000830184611034565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110c58261107c565b810181811067ffffffffffffffff821117156110e4576110e361108d565b5b80604052505050565b60006110f761105e565b905061110382826110bc565b919050565b600067ffffffffffffffff8211156111235761112261108d565b5b61112c8261107c565b9050602081019050919050565b82818337600083830152505050565b600061115b61115684611108565b6110ed565b90508281526020810184848401111561117757611176611077565b5b611182848285611139565b509392505050565b600082601f83011261119f5761119e611072565b5b81356111af848260208601611148565b91505092915050565b6000602082840312156111ce576111cd611068565b5b600082013567ffffffffffffffff8111156111ec576111eb61106d565b5b6111f88482850161118a565b91505092915050565b61120a8161102a565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561124a57808201518184015260208101905061122f565b60008484015250505050565b600061126182611210565b61126b818561121b565b935061127b81856020860161122c565b6112848161107c565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112ba8261128f565b9050919050565b6112ca816112af565b82525050565b60006080830160008301516112e86000860182611201565b50602083015184820360208601526113008282611256565b91505060408301516113156040860182611201565b50606083015161132860608601826112c1565b508091505092915050565b6000602082019050818103600083015261134d81846112d0565b905092915050565b61135e8161102a565b811461136957600080fd5b50565b60008135905061137b81611355565b92915050565b60006020828403121561139757611396611068565b5b60006113a58482850161136c565b91505092915050565b6000610120830160008301516113c76000860182611201565b5060208301516113da6020860182611201565b5060408301516113ed60408601826112c1565b50606083015184820360608601526114058282611256565b915050608083015161141a6080860182611201565b5060a083015161142d60a0860182611201565b5060c083015184820360c08601526114458282611256565b91505060e083015161145a60e0860182611201565b506101008301518482036101008601526114748282611256565b9150508091505092915050565b6000602082019050818103600083015261149b81846113ae565b905092915050565b6114ac816112af565b81146114b757600080fd5b50565b6000813590506114c9816114a3565b92915050565b6000602082840312156114e5576114e4611068565b5b60006114f3848285016114ba565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006115348383611201565b60208301905092915050565b6000602082019050919050565b6000611558826114fc565b6115628185611507565b935061156d83611518565b8060005b8381101561159e5781516115858882611528565b975061159083611540565b925050600181019050611571565b5085935050505092915050565b60006080830160008301516115c36000860182611201565b50602083015184820360208601526115db8282611256565b91505060408301516115f06040860182611201565b5060608301518482036060860152611608828261154d565b9150508091505092915050565b6000602082019050818103600083015261162f81846115ab565b905092915050565b600080600080600060a0868803121561165357611652611068565b5b600086013567ffffffffffffffff8111156116715761167061106d565b5b61167d8882890161118a565b955050602061168e8882890161136c565b945050604086013567ffffffffffffffff8111156116af576116ae61106d565b5b6116bb8882890161118a565b93505060606116cc8882890161136c565b925050608086013567ffffffffffffffff8111156116ed576116ec61106d565b5b6116f98882890161118a565b9150509295509295909350565b600081905092915050565b600061171c82611210565b6117268185611706565b935061173681856020860161122c565b80840191505092915050565b600061174e8284611711565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806117a057607f821691505b6020821081036117b3576117b2611759565b5b50919050565b600082825260208201905092915050565b7f6d6178206c696d69742065786365656465640000000000000000000000000000600082015250565b60006118006012836117b9565b915061180b826117ca565b602082019050919050565b6000602082019050818103600083015261182f816117f3565b9050919050565b7f6e6f7420656e6f7567682066756e647300000000000000000000000000000000600082015250565b600061186c6010836117b9565b915061187782611836565b602082019050919050565b6000602082019050818103600083015261189b8161185f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006118dc8261102a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361190e5761190d6118a2565b5b600182019050919050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b600061194b8284611711565b915061195682611919565b60018201915081905092915050565b60006119718285611711565b915061197d8284611711565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026119eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826119ae565b6119f586836119ae565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611a32611a2d611a288461102a565b611a0d565b61102a565b9050919050565b6000819050919050565b611a4c83611a17565b611a60611a5882611a39565b8484546119bb565b825550505050565b600090565b611a75611a68565b611a80818484611a43565b505050565b5b81811015611aa457611a99600082611a6d565b600181019050611a86565b5050565b601f821115611ae957611aba81611989565b611ac38461199e565b81016020851015611ad2578190505b611ae6611ade8561199e565b830182611a85565b50505b505050565b600082821c905092915050565b6000611b0c60001984600802611aee565b1980831691505092915050565b6000611b258383611afb565b9150826002028217905092915050565b611b3e82611210565b67ffffffffffffffff811115611b5757611b5661108d565b5b611b618254611788565b611b6c828285611aa8565b600060209050601f831160018114611b9f5760008415611b8d578287015190505b611b978582611b19565b865550611bff565b601f198416611bad86611989565b60005b82811015611bd557848901518255600182019150602085019450602081019050611bb0565b86831015611bf25784890151611bee601f891682611afb565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b50565b6000611c22600083611c07565b9150611c2d82611c12565b600082019050919050565b6000611c4382611c15565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000611c836014836117b9565b9150611c8e82611c4d565b602082019050919050565b60006020820190508181036000830152611cb281611c76565b9050919050565b7f6661696c65640000000000000000000000000000000000000000000000000000600082015250565b6000611cef6006836117b9565b9150611cfa82611cb9565b602082019050919050565b60006020820190508181036000830152611d1e81611ce2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220dac0894f9beb9afd1d40634f8e6288f94119d1ce5b4183d64d772582a34c71ea64736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1205,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "company_id",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1208,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "part_id",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1251,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "companyMapping",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(Company)1218_storage)"
      },
      {
        "astId": 1256,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "partMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Part)1237_storage)"
      },
      {
        "astId": 1261,
        "contract": "contracts/AstroVerify.sol:AstroVerify",
        "label": "registryMapping",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Registry)1246_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Company)1218_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AstroVerify.Company)",
        "numberOfBytes": "32",
        "value": "t_struct(Company)1218_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Registry)1246_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct AstroVerify.Registry)",
        "numberOfBytes": "32",
        "value": "t_struct(Registry)1246_storage"
      },
      "t_mapping(t_uint256,t_struct(Part)1237_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AstroVerify.Part)",
        "numberOfBytes": "32",
        "value": "t_struct(Part)1237_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Company)1218_storage": {
        "encoding": "inplace",
        "label": "struct AstroVerify.Company",
        "members": [
          {
            "astId": 1210,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1212,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1214,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1217,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partsArray",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Part)1237_storage": {
        "encoding": "inplace",
        "label": "struct AstroVerify.Part",
        "members": [
          {
            "astId": 1220,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1222,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1224,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "companyAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1226,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partName",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1228,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "counter",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1230,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "totalSupply",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1232,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "description",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 1234,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1236,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "imageUrl",
            "offset": 0,
            "slot": "8",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(Registry)1246_storage": {
        "encoding": "inplace",
        "label": "struct AstroVerify.Registry",
        "members": [
          {
            "astId": 1239,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "partId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1241,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "serialNo",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1243,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "registryTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1245,
            "contract": "contracts/AstroVerify.sol:AstroVerify",
            "label": "owner",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}